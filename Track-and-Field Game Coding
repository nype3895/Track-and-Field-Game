import React, { useState, useEffect } from 'react';
import { ChevronUp, ChevronDown, Medal, Timer, Wind, Zap, Trophy } from 'lucide-react';
import { Alert, AlertTitle } from '@/components/ui/alert';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';

const TrackGame = () => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [playerPosition, setPlayerPosition] = useState(0);
  const [playerLane, setPlayerLane] = useState(3);
  const [speed, setSpeed] = useState(0);
  const [stamina, setStamina] = useState(100);
  const [powerUps, setPowerUps] = useState([]);
  const [playerStats, setPlayerStats] = useState({
    wins: 0,
    personalBest: null,
    raceTime: 0,
  });
  const [difficulty, setDifficulty] = useState('medium');
  const [selectedDistance, setSelectedDistance] = useState(400);
  const [weather, setWeather] = useState('clear');

  const competitors = [
    { name: "Bolt Jr.", lane: 2, speed: 0, position: 0, skill: 0.95 },
    { name: "Speed Demon", lane: 4, speed: 0, position: 0, skill: 0.9 },
    { name: "Lightning", lane: 5, speed: 0, position: 0, skill: 0.85 }
  ];

  const [competitorPositions, setCompetitorPositions] = useState(
    competitors.map(() => 0)
  );

  const difficultyMultiplier = {
    easy: 0.7,
    medium: 1,
    hard: 1.3
  };

  const weatherEffects = {
    clear: { speedMod: 1, staminaMod: 1 },
    wind: { speedMod: 0.8, staminaMod: 1.2 },
    rain: { speedMod: 0.9, staminaMod: 1.1 }
  };

  useEffect(() => {
    if (!isPlaying) return;

    const gameLoop = setInterval(() => {
      setPlayerStats(prev => ({
        ...prev,
        raceTime: prev.raceTime + 0.05
      }));

      // Update player position
      setPlayerPosition(prev => {
        const weatherMod = weatherEffects[weather].speedMod;
        const newPos = prev + (speed * weatherMod);
        if (newPos >= selectedDistance) {
          finishRace();
          return selectedDistance;
        }
        return newPos;
      });

      // Update stamina with weather effect
      setStamina(prev => {
        const weatherMod = weatherEffects[weather].staminaMod;
        return Math.max(0, prev - (speed * 0.2 * weatherMod));
      });

      // Generate random power-ups
      if (Math.random() < 0.02) {
        const newPowerUp = {
          type: Math.random() < 0.5 ? 'speed' : 'stamina',
          position: Math.random() * selectedDistance,
          lane: Math.floor(Math.random() * 5) + 1
        };
        setPowerUps(prev => [...prev, newPowerUp]);
      }

      // Update AI runners
      setCompetitorPositions(prev => 
        prev.map((pos, idx) => {
          const diffMod = difficultyMultiplier[difficulty];
          const weatherMod = weatherEffects[weather].speedMod;
          const aiSpeed = (2 + Math.random() * 2) * competitors[idx].skill * diffMod * weatherMod;
          const newPos = pos + aiSpeed;
          return newPos >= selectedDistance ? selectedDistance : newPos;
        })
      );

      // Check for power-up collection
      setPowerUps(prev => {
        return prev.filter(powerUp => {
          const collected = 
            Math.abs(powerUp.position - playerPosition) < 10 &&
            powerUp.lane === playerLane;
          
          if (collected) {
            if (powerUp.type === 'speed') setSpeed(s => Math.min(7, s + 1));
            else setStamina(s => Math.min(100, s + 20));
          }
          
          return !collected;
        });
      });
    }, 50);

    return () => clearInterval(gameLoop);
  }, [isPlaying, speed, difficulty, weather, selectedDistance]);

  const finishRace = () => {
    setIsPlaying(false);
    
    const results = [
      { name: "Player", position: playerPosition, lane: playerLane, time: playerStats.raceTime },
      ...competitors.map((comp, idx) => ({
        name: comp.name,
        position: competitorPositions[idx],
        lane: comp.lane,
        time: playerStats.raceTime * (selectedDistance / competitorPositions[idx])
      }))
    ].sort((a, b) => b.position - a.position);

    if (results[0].name === "Player") {
      setPlayerStats(prev => ({
        ...prev,
        wins: prev.wins + 1,
        personalBest: prev.personalBest === null ? 
          playerStats.raceTime : 
          Math.min(prev.personalBest, playerStats.raceTime)
      }));
    }

    setRaceResults(results);
  };

  const startRace = () => {
    setIsPlaying(true);
    setPlayerPosition(0);
    setSpeed(0);
    setStamina(100);
    setCompetitorPositions(competitors.map(() => 0));
    setRaceResults([]);
    setPowerUps([]);
    setPlayerStats(prev => ({ ...prev, raceTime: 0 }));
    setWeather(['clear', 'wind', 'rain'][Math.floor(Math.random() * 3)]);
  };

  const [raceResults, setRaceResults] = useState([]);

  const handleKeyPress = (increase) => {
    if (!isPlaying || stamina <= 0) return;
    
    setSpeed(prev => {
      const newSpeed = increase ? prev + 0.5 : Math.max(0, prev - 0.5);
      return Math.min(newSpeed, 5);
    });
  };

  return (
    <div className="w-full max-w-4xl p-4 bg-gray-900 text-white rounded-lg">
      {/* Header Stats */}
      <div className="grid grid-cols-3 gap-4 mb-4">
        <Card className="bg-gray-800 text-white">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Trophy size={20} /> Stats
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div>Wins: {playerStats.wins}</div>
            <div>Best Time: {playerStats.personalBest ? playerStats.personalBest.toFixed(2) : '-'}s</div>
          </CardContent>
        </Card>
        
        <Card className="bg-gray-800 text-white">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Timer size={20} /> Race Info
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div>Time: {playerStats.raceTime.toFixed(2)}s</div>
            <div>Distance: {selectedDistance}m</div>
          </CardContent>
        </Card>

        <Card className="bg-gray-800 text-white">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Wind size={20} /> Conditions
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div>Weather: {weather}</div>
            <div>Speed: {speed.toFixed(1)} m/s</div>
          </CardContent>
        </Card>
      </div>

      {/* Game Controls */}
      <div className="mb-4 flex justify-between items-center">
        <div className="flex gap-4">
          <select 
            className="bg-gray-800 p-2 rounded"
            value={difficulty}
            onChange={(e) => setDifficulty(e.target.value)}
            disabled={isPlaying}
          >
            <option value="easy">Easy</option>
            <option value="medium">Medium</option>
            <option value="hard">Hard</option>
          </select>
          
          <select 
            className="bg-gray-800 p-2 rounded"
            value={selectedDistance}
            onChange={(e) => setSelectedDistance(Number(e.target.value))}
            disabled={isPlaying}
          >
            <option value="100">100m Sprint</option>
            <option value="200">200m Sprint</option>
            <option value="400">400m Race</option>
            <option value="800">800m Race</option>
          </select>
        </div>
        
        <div className="flex items-center gap-4">
          <div className="w-32 bg-gray-800 rounded-full h-4">
            <div 
              className="bg-green-500 h-full rounded-full transition-all"
              style={{ width: `${stamina}%` }}
            />
          </div>
          
          <button
            onClick={startRace}
            disabled={isPlaying}
            className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded disabled:bg-gray-700"
          >
            {isPlaying ? "Race in Progress" : "Start Race"}
          </button>
        </div>
      </div>

      {/* Track visualization */}
      <div className="relative h-64 bg-gray-800 rounded-lg overflow-hidden mb-4">
        {/* Track lanes */}
        {[1, 2, 3, 4, 5].map(lane => (
          <div
            key={lane}
            className="absolute w-full h-12 border-t border-b border-gray-600"
            style={{ top: `${(lane - 1) * 48}px` }}
          />
        ))}

        {/* Power-ups */}
        {powerUps.map((powerUp, idx) => (
          <div
            key={idx}
            className={`absolute w-6 h-6 rounded-full transition-all duration-50 ${
              powerUp.type === 'speed' ? 'bg-yellow-500' : 'bg-green-500'
            }`}
            style={{
              left: `${(powerUp.position / selectedDistance) * 100}%`,
              top: `${(powerUp.lane - 1) * 48 + 12}px`
            }}
          >
            {powerUp.type === 'speed' ? <Zap size={16} className="m-1" /> : 'â™¥'}
          </div>
        ))}

        {/* Player */}
        <div
          className="absolute w-6 h-6 bg-blue-500 rounded-full transition-all duration-50"
          style={{
            left: `${(playerPosition / selectedDistance) * 100}%`,
            top: `${(playerLane - 1) * 48 + 12}px`
          }}
        />

        {/* AI Runners */}
        {competitors.map((comp, idx) => (
          <div
            key={idx}
            className="absolute w-6 h-6 bg-red-500 rounded-full transition-all duration-50"
            style={{
              left: `${(competitorPositions[idx] / selectedDistance) * 100}%`,
              top: `${(comp.lane - 1) * 48 + 12}px`
            }}
          />
        ))}

        {/* Finish line */}
        <div 
          className="absolute h-full w-1 bg-white"
          style={{ left: '99%' }}
        />
      </div>

      {/* Controls */}
      <div className="flex gap-4 justify-center mb-4">
        <button
          onMouseDown={() => handleKeyPress(true)}
          onMouseUp={() => handleKeyPress(false)}
          disabled={!isPlaying || stamina <= 0}
          className="p-4 bg-blue-600 hover:bg-blue-700 text-white rounded disabled:bg-gray-700"
        >
          <ChevronUp size={24} />
        </button>
        <button
          onClick={() => handleKeyPress(false)}
          disabled={!isPlaying}
          className="p-4 bg-blue-600 hover:bg-blue-700 text-white rounded disabled:bg-gray-700"
        >
          <ChevronDown size={24} />
        </button>
      </div>

      {/* Race Results */}
      {raceResults.length > 0 && (
        <Alert className="bg-gray-800 border-gray-700">
          <AlertTitle className="mb-2 text-white">Race Results</AlertTitle>
          <div className="space-y-2 text-white">
            {raceResults.map((result, idx) => (
              <div key={idx} className="flex items-center gap-2">
                {idx === 0 && <Medal className="text-yellow-500" size={20} />}
                <span>{`${idx + 1}. ${result.name} - ${result.time.toFixed(2)}s`}</span>
              </div>
            ))}
          </div>
        </Alert>
      )}
    </div>
  );
};

export default TrackGame;